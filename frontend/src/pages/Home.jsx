import React, { useState, useEffect, useRef } from 'react';
import { Loader, Card, FormField } from '../components';
import axios from 'axios';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">
      {title}
    </h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchText, setSearchText] = useState('');
  const isFetching = useRef(false); // Ref to prevent duplicate fetches
  const [editingPost, setEditingPost] = useState(null);
  const [newPrompt, setNewPrompt] = useState("");

  // Function to detect if the text is in Hebrew
  const isHebrew = (text) => {
    const hebrewRegex = /[\u0590-\u05FF]/;
    return hebrewRegex.test(text);
  };

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPosts.filter((post) =>
          post.name.toLowerCase().includes(e.target.value.toLowerCase()) ||
          post.prompt.toLowerCase().includes(e.target.value.toLowerCase())
        );
        setSearchedResults(searchResults);
      }, 500)
    );
  };

  const handleEditPrompt = (postId, prompt) => {
    setEditingPost(postId);
    setNewPrompt(prompt);
  };

  const handleSavePrompt = (postId) => {
    // Save the new prompt here (e.g., update the post in the database)
    setEditingPost(null);
  };

  useEffect(() => {
    if (!isFetching.current) {
      isFetching.current = true; // Prevent duplicate fetches
      const fetchPosts = async () => {
        setLoading(true);
        try {
          const response = await axios.get(`/api/v1/post`, {
            headers: { 'Content-Type': 'application/json' },
          });
          setAllPosts(response.data.data.reverse());
        } catch (error) {
          console.error('Error fetching posts:', error);
        } finally {
          setLoading(false);
          isFetching.current = false; // Allow future fetches if necessary
        }
      };

      fetchPosts();
    }
  }, []); // Empty dependency array to run only once on mount

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1>
        <p className="mt-2 text-[#666e75] text-[16px] max-w-[500px]">
          Browse through a collection of imaginative and visually stunning images generated by DALL-E AI
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search posts by name or prompt"
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing results for <span className="text-[#222328]">{searchText}</span>
              </h2>
            )}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
              {searchText ? (
                <RenderCards data={searchedResults} title="No search results found" />
              ) : (
                <RenderCards data={allPosts} title="No posts found" />
              )}
            </div>
          </>
        )}
      </div>

      <div className="mt-10 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        {allPosts.map((post) => {
          const isPostHebrew = isHebrew(post.prompt);
          return (
            <div
              key={post._id}
              className={`post hover:bg-gray-100 p-4 rounded-lg ${isPostHebrew ? 'rtl' : ''}`}
            >
              <div className={`post-content ${isPostHebrew ? 'text-right' : 'text-left'}`}>
                {editingPost === post._id ? (
                  <div>
                    <textarea
                      value={newPrompt}
                      onChange={(e) => setNewPrompt(e.target.value)}
                      className="prompt-edit-input p-2 border rounded w-full"
                    />
                    <button
                      onClick={() => handleSavePrompt(post._id)}
                      className="save-btn bg-blue-500 text-white p-2 rounded mt-2"
                    >
                      Save
                    </button>
                  </div>
                ) : (
                  <p
                    className={`prompt-text ${isPostHebrew ? 'text-right' : ''}`}
                    style={{ direction: isPostHebrew ? 'rtl' : 'ltr' }}
                  >
                    {post.prompt}
                  </p>
                )}
              </div>
              <div className="user-info flex items-center">
                <div className="user-photo rounded-full bg-green-500 text-white flex items-center justify-center w-8 h-8">
                  {post.name[0].toUpperCase()}
                </div>
                <div className={`user-name ml-2 ${isPostHebrew ? 'text-right' : ''}`}>
                  {post.name}
                </div>
              </div>
              <div className="post-actions flex justify-between mt-4">
                {editingPost === post._id ? (
                  <button
                    onClick={() => handleSavePrompt(post._id)}
                    className="save-btn bg-blue-500 text-white p-2 rounded"
                  >
                    Save
                  </button>
                ) : (
                  <>
                    <button
                      onClick={() => handleEditPrompt(post._id, post.prompt)}
                      className="edit-btn bg-yellow-500 text-white p-2 rounded"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => alert("Downloading image...")}
                      className="download-btn bg-green-500 text-white p-2 rounded"
                    >
                      Download
                    </button>
                  </>
                )}
              </div>
            </div>
          );
        })}
      </div>
    </section>
  );
};

export default Home;
